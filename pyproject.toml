[build-system]
requires = ["setuptools>=65.5.1", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "allocator"
version = "1.0.0"
description = "Optimally Allocate Geographically Distributed Tasks"
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Suriyan Laohaprapanon", email = "suriyant@gmail.com"},
    {name = "Gaurav Sood", email = "gsood07@gmail.com"},
]
keywords = ["routing", "shortest path", "geographic allocation", "optimization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "pandas>=1.0.0",
    "numpy>=1.20.0",
    "matplotlib>=3.3.0",
    "utm>=0.7.0",
    "networkx>=2.6.0",
    "googlemaps>=4.0.0",
    "polyline>=1.4.0",
    "haversine>=2.5.0",
    "folium>=0.12.0",
    "scipy>=1.7.0",
    "scikit-learn",
    "click>=8.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "check-manifest",
    "flake8",
    "black",
    "isort",
]
test = [
    "coverage",
    "pytest",
    "pytest-cov",
    "tox",
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
]

[project.urls]
Homepage = "https://github.com/soodoku/allocator"
"Bug Reports" = "https://github.com/geosensing/allocator/issues"
Source = "https://github.com/geosensing/allocator"
Documentation = "https://geosensing.github.io/allocator/"

[project.scripts]
allocator = "allocator.cli.main:cli"

[tool.setuptools]
packages = ["allocator"]

[tool.setuptools.package-data]
allocator = [
    "examples/*.csv",
    "examples/*.png",
    "examples/sort-by-distance/*.csv",
    "examples/sort-by-distance/*.png",
    "examples/kmeans/*.csv",
    "examples/kmeans/*.png",
    "examples/KaHIP/*.csv",
    "examples/KaHIP/*.png",
    "examples/TSP-buffoon/*.svg",
    "examples/TSP-kmeans/*.svg",
    "examples/TSP-ortools-kmeans/*.png",
    "examples/TSP-ortools-kmeans/map/*.html",
    "examples/TSP-ortools-buffoon/delhi/*.png",
    "examples/TSP-ortools-buffoon/chonburi/*.png",
    "examples/GM-buffoon/chonburi/*.png",
    "examples/GM-buffoon/delhi/*.png",
    "examples/OSRM-buffoon/*.html",
    "examples/compare-kahip-kmeans/*.csv",
    "tests/*.csv",
]

[tool.pytest.ini_options]
testpaths = ["allocator/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]


[tool.coverage.run]
source = ["allocator"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]